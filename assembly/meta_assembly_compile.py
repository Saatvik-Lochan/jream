import sys
import os
from shared_variables_gen import shared_variables

filename = sys.argv[1]

assert (filename.endswith("_m.S"))
raw_asm_filename = filename[:-4] + ".S"


def get_tokens(line):
    tokens = list(map(lambda x: x.rstrip(", "), line.strip().split(" ")))
    return tokens


def transform_if_necessary(line: str):
    if line.startswith("load_shared"):
        tokens = get_tokens(line)

        assert (len(tokens) == 3)
        assert (tokens[0] == "load_shared")
        register = tokens[1]
        index = shared_variables[tokens[2]]

        # s1 is where we save the pointer to the shared variables
        # we initially pass it in as an argument then save it
        return f"ld {register}, {index * 8}(s1) " + \
            f"# generated from '{line.strip()}'\n"

    if line.startswith("load_arg"):
        tokens = get_tokens(line)

        assert (len(tokens) == 3)
        assert (tokens[0] == "load_arg")

        register = tokens[1]
        arg_index = int(tokens[2])

        # s3 is where we save the pointer to the argument array
        return f"ld {register}, {arg_index * 8}(s3) " + \
            f"# generated from '{line.strip()}'\n"

    else:
        return line


disclaimer_lines = [
    f"# THIS IS A FILE GENERATED BY {os.path.basename(__file__)}" +
    f" APPLIED ON {filename}\n",
    "# ASSUME s0 holds a pointer to the pcb\n",
    "# ASSUME s1 holds a pointer to argument pointer array\n",
    "# ASSUME s2 holds a pointer to the argument array for this instr\n\n",
]

with open(filename) as meta_asm_file:
    with open(raw_asm_filename, "w") as raw_asm_file:
        raw_asm_file.writelines(disclaimer_lines)

        for line in meta_asm_file:
            raw_asm_file.write(transform_if_necessary(line))
